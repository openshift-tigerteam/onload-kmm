apiVersion: v1
kind: ConfigMap
metadata:
  name: onload-kmm-dockerfile
  namespace: onload-kmm
data:
  dockerfile: |
    ARG KERNEL_FULL_VERSION
    ARG SRPM_IMAGE
    ARG TIMESTAMP

    FROM ${SRPM_IMAGE} AS srpm
    FROM registry.redhat.io/ubi9/ubi:latest as builder
    ARG KERNEL_FULL_VERSION
    ARG TIMESTAMP
    RUN echo "TIMESTAMP=${TIMESTAMP}"
    RUN echo "KERNEL_FULL_VERSION=${KERNEL_FULL_VERSION}"

    RUN dnf install -y -q \
          make \
          gcc \
          kernel-devel-${KERNEL_FULL_VERSION} \
          kernel-headers-${KERNEL_FULL_VERSION} \
          elfutils-libelf-devel \
          tar \
          patch \
          diffutils \
          autoconf \
          automake \
          libtool \
          python3-devel \
          libpcap-devel \
          libcap-devel \
          kmod \
          unzip \
          rpm-build \
        && dnf clean all -q

    # Bring in SRPM from stage 0
    COPY --from=srpm /root/*.src.rpm /root/

    # Expand and build SRPM
    RUN rpm -ivh /root/*.src.rpm \
     && rpmbuild -bb /root/rpmbuild/SPECS/openonload.spec

    RUN rpm -ivh --nodeps --noscripts /root/rpmbuild/RPMS/x86_64/onload-kmod-*.rpm

    RUN for mod in /lib/modules/${KERNEL_FULL_VERSION}/extra/*.ko; do \
      /usr/src/kernels/${KERNEL_FULL_VERSION}/scripts/sign-file sha256 \
      /run/secrets/onload-signing-keys/mok-onload.priv /run/secrets/onload-signing-keys/mok-onload.pem "$mod"; \
    done

    RUN depmod -b / ${KERNEL_FULL_VERSION}

    RUN rpm2cpio /root/rpmbuild/RPMS/x86_64/onload-kmod-*.rpm | cpio -idmv

    # Final stage: slim runtime image containing only the .ko files
    FROM registry.redhat.io/ubi9/ubi-minimal:latest
    ARG KERNEL_FULL_VERSION

    # Preserve the directory structure KMM expects
    COPY --from=builder /lib/modules/${KERNEL_FULL_VERSION} /opt/lib/modules/${KERNEL_FULL_VERSION}
    RUN ls -la /opt/lib/modules/${KERNEL_FULL_VERSION}
    RUN sleep 10
